- name: create app directory
  sudo: true
  file: >
    path={{ nodejs_app.dir }}
    state=directory
    owner={{ ansible_ssh_user }}
    group={{ ansible_ssh_user }}
  when: not nodejs_app.skip_clone

- name: clone repository
  git: >
    repo={{ nodejs_app.repo }}
    dest={{ nodejs_app.dir }}
    version={{ nodejs_app.version }}
  notify:
    - build {{ nodejs_app.service }}
    - restart {{ nodejs_app.service }}
  when: not nodejs_app.skip_clone

- name: npm install
  command: >
    npm install
    chdir="{{ nodejs_app.dir }}"
  changed_when: false

- name: generate .envrc
  template: >
    src=envrc.j2
    dest="{{ nodejs_app.dir }}/.envrc"
    mode=0644

- name: allow .envrc
  command: >
    /usr/local/bin/direnv allow
    chdir={{ nodejs_app.dir }}
  register: result
  changed_when: false

- name: generate master upstart script
  sudo: true
  template: >
    src=upstart-master.conf.j2
    dest=/etc/init/{{ nodejs_app.service }}.conf
    owner=root
    group=root
    mode=0644
  notify: restart {{ nodejs_app.service }}

- name: generate worker upstart scripts
  sudo: true
  template: >
    src=upstart-worker.conf.j2
    dest=/etc/init/{{ nodejs_app.service }}-{{ item }}.conf
    owner=root
    group=root
    mode=0644
  notify: restart {{ nodejs_app.service }}
  with_sequence: start=1 end={{ nodejs_app.workers }}

- name: create logs directory
  sudo: true
  file: >
    path={{ nodejs_app.logdir }}
    state=directory
    owner={{ nodejs_app.owner }}
    group={{ nodejs_app.group }}

- name: touch log
  sudo: true
  file: >
    path={{ nodejs_app.logdir }}/{{ nodejs_app.service }}.log
    state=touch
    owner={{ nodejs_app.owner }}
    group={{ nodejs_app.group }}
  changed_when: false
